Run-Length Encoding (RLE) is a form of Data Compression in which Runs of data (consecutive pieces of data that all have the same value) are stored as one value and one count, rather than as the original run (all of the same value). For example, if a data set (an array of ints) was { 5, 5, 5, 5, 10, 10, 10, 10, 5, 5 }, RLE would represent this data as 4 5's, 4 10's, and 2 5's. To be more technical, the original set of data would be converted into this array of ints { 4, 5, 4, 10, 2, 5 } using RLE. (4 5's, 4 10's, 2 5's). Notice that the original data contained 10 ints while the RLE equivalent contains only 6 ints. Converting the original data into RLE means that it will take less space on a computer and that it can be transmitted over a network faster.

RLE is most useful on data that contains many such runs. Consider, for example, simple graphic images such as icons, line drawings, Conway's Game of Life, and animations. It is not useful with data that doesn't have many runs, as it could increase the size of the original data set.

Write a Method that will Decode a set of RLE data:

Your method will take a single parameter, an array of ints (the RLE encoded data).

Your method will return an array of ints (the decoded data).

Example: If your method receives the array { 4, 5, 4, 10, 2, 5 }, it should return the array { 5, 5, 5, 5, 10, 10, 10, 10, 5, 5 }.

Example: If your method receives the array { 1, 1, 1, 2, 1, 3, 1, 4, 1, 5 }, it should return the array { 1, 2, 3, 4, 5 }. This is an example of when RLE is not useful.

Example: If your method receives the array { 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 }, it should return the array { 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5 }.

Example: If your method receives the array { 5, 1, 4, 2, 3, 3, 2, 4, 1, 5 }, it should return the array { 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5 }.
